package com.Benjohn.com;


import java.awt.Font;  
import java.awt.RenderingHints;  
import java.io.FileOutputStream;  
  
import org.jfree.chart.ChartFactory;  
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartUtilities;  
import org.jfree.chart.JFreeChart;  
import org.jfree.chart.axis.CategoryAxis;  
import org.jfree.chart.axis.ValueAxis;  
import org.jfree.chart.plot.CategoryPlot;  
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.title.TextTitle;  
import org.jfree.data.category.CategoryDataset;  
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;  
  
class DrawShuizhun {  
     
    public void Creat(ShuizhunInajust Data) {
    	 CategoryDataset dataset = getDataSet(Data); 
         // 2. 构造chart  
         JFreeChart chart = ChartFactory.createBarChart3D(  
                 "高程图", // 图表标题  
                 "点号", // 目录轴的显示标签--横轴  
                 "高程", // 数值轴的显示标签--纵轴  
                 dataset, // 数据集  
                 PlotOrientation.VERTICAL, // 图表方向：水平、  
                 true, // 是否显示图例(对于简单的柱状图必须  
                 false, // 是否生成工具  
                 false // 是否生成URL链接  
                 );  
         // 3. 处理chart中文显示问题  
         processChart(chart);  
   
         // 4. chart输出图片  
         writeChartAsImage(chart);  
   
         // 5. chart 以swing形式输出  
         ChartFrame ShowFrame = new ChartFrame("水准数据柱状图", chart);  
         ShowFrame.pack();  
         ShowFrame.setVisible(true); 
    }
    
    private static CategoryDataset getDataSet(ShuizhunInajust Data) {
    	DefaultCategoryDataset dataset = new DefaultCategoryDataset();  
    	int i=0;
    	for (i=0;i<=Data.Xarry.length-1;i++) {
    		dataset.addValue(Data.Xarry[i][0],"高程", "第"+ i + "+1个未知点");
    		
    		dataset.addValue(Data.MX.get(i, 0),"高程", "第"+ i + "+1个未知点");
    	}
    	
    	return dataset; 
    }
  
    private static void processChart(JFreeChart chart) {  
        CategoryPlot plot = chart.getCategoryPlot();  
        CategoryAxis domainAxis = plot.getDomainAxis();  
        ValueAxis rAxis = plot.getRangeAxis();  
        chart.getRenderingHints().put(RenderingHints.KEY_TEXT_ANTIALIASING,  
                RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);  
        TextTitle textTitle = chart.getTitle();  
        textTitle.setFont(new Font("宋体", Font.PLAIN, 20));  
        domainAxis.setTickLabelFont(new Font("sans-serif", Font.PLAIN, 11));  
        domainAxis.setLabelFont(new Font("宋体", Font.PLAIN, 12));  
        rAxis.setTickLabelFont(new Font("sans-serif", Font.PLAIN, 12));  
        rAxis.setLabelFont(new Font("宋体", Font.PLAIN, 12));  
        chart.getLegend().setItemFont(new Font("宋体", Font.PLAIN, 12));  
        // renderer.setItemLabelGenerator(new LabelGenerator(0.0));  
        // renderer.setItemLabelFont(new Font("宋体", Font.PLAIN, 12));  
        // renderer.setItemLabelsVisible(true);  
    } 
   
    private static void writeChartAsImage(JFreeChart chart) {  
        FileOutputStream fos_jpg = null;  
        try {  
            fos_jpg = new FileOutputStream("B:\\gaocheng.jpg");  
            ChartUtilities.writeChartAsJPEG(fos_jpg, 1, chart, 400, 300, null);  
        } catch (Exception e) {  
            e.printStackTrace();  
        } finally {  
            try {  
                fos_jpg.close();  
            } catch (Exception e) {  
            }  
        }  
    }  
}

class DrawBianjiao{
	public void Creat(Point[] PointArry,Bearing[] BearingArry,Side[] SideArry) {
		JFreeChart chart = ChartFactory.createXYLineChart(
		         "坐标网格图",
		         "Value Y",
		         "Value X",
		         createDataSet(PointArry,BearingArry,SideArry),
		         PlotOrientation.VERTICAL ,
		         true , true , false);
		      
		      processChart(chart);
		      writeChartAsImage(chart);
		      
		      ChartFrame ShowFrame = new ChartFrame("坐标图", chart);
		      ShowFrame.pack();  
		      ShowFrame.setVisible(true);

	}
	
	private  XYSeriesCollection createDataSet(Point[] PointArry,Bearing[] BearingArry,Side[] SideArry) {
		final XYSeries XYDrawData=new XYSeries("坐标图");
		final XYSeriesCollection dataset=new XYSeriesCollection();
		int i;
		
		for (i=0;i<=SideArry.length-1;i++) {
			XYDrawData.add(SideArry[i].Pstart.Y, SideArry[i].Pstart.X);
			XYDrawData.add(SideArry[i].Pend.Y, SideArry[i].Pend.X);
		}
		for (i=0;i<=BearingArry.length-1;i++) {
			XYDrawData.add(BearingArry[i].Pstart.Y, BearingArry[i].Pstart.X);
			XYDrawData.add(BearingArry[i].Pend.Y, BearingArry[i].Pend.X);
		}
		dataset.addSeries(XYDrawData); 
		return dataset;
	}
	

	
	private static void processChart(JFreeChart chart) {  
        XYPlot plot = chart.getXYPlot();  //Plot为 背景
        ValueAxis Axish = plot.getRangeAxis(); //为数轴的数据 
        ValueAxis Axisv = plot.getDomainAxis();
        chart.getRenderingHints().put(RenderingHints.KEY_TEXT_ANTIALIASING,  
                RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);  
        TextTitle textTitle = chart.getTitle();  
        textTitle.setFont(new Font("宋体", Font.PLAIN, 20)); 
        
        Axish.setTickLabelFont(new Font("sans-serif", Font.PLAIN, 12));  
        Axish.setLabelFont(new Font("宋体", Font.PLAIN, 12));
        Axish.setAutoRange(true);
        
        Axisv.setTickLabelFont(new Font("sans-serif", Font.PLAIN, 12));  
        Axisv.setLabelFont(new Font("宋体", Font.PLAIN, 12)); 
        Axisv.setAutoRange(true);
        
        chart.getLegend().setItemFont(new Font("宋体", Font.PLAIN, 12));  

    }
	
	private static void writeChartAsImage(JFreeChart chart) {  
        FileOutputStream fos_jpg = null;  
        try {  
            fos_jpg = new FileOutputStream("B:\\zuobiao.jpg");  
            ChartUtilities.writeChartAsJPEG(fos_jpg, 1, chart, 400, 300, null);  
        } catch (Exception e) {  
            e.printStackTrace();  
        } finally {  
            try {  
                fos_jpg.close();  
            } catch (Exception e) {  
            }  
        }  
    }
	
}


